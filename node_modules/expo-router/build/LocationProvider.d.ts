import React from "react";
type SearchParams = Record<string, string | string[]>;
type UrlObject = {
    pathname: string;
    readonly params: SearchParams;
    segments: string[];
};
export declare function compareUrlSearchParams(a: SearchParams, b: SearchParams): boolean;
export declare function getNormalizedStatePath({ path: statePath, params, }: {
    path: string;
    params: any;
}): Omit<UrlObject, "pathname">;
export declare function LocationProvider({ children }: {
    children: React.ReactNode;
}): JSX.Element;
/** @returns Currently selected route as a normalized string without search parameters. e.g. `/acme?foo=bar` -> `/acme`. Segments will be normalized: `/[id]?id=normal` -> `/normal` */
export declare function usePathname(): string;
/** @returns Current URL Search Parameters. */
export declare function useSearchParams<TParams extends SearchParams = SearchParams>(): Partial<TParams>;
/** @returns Current URL Search Parameters that only update when the path matches the current route. */
export declare function useLocalSearchParams<TParams extends SearchParams = SearchParams>(): Partial<TParams>;
/** @returns Array of selected segments. */
export declare function useSegments(): string[];
export {};
//# sourceMappingURL=LocationProvider.d.ts.map