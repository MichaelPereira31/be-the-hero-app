{"version":3,"file":"LogBoxButton.js","sourceRoot":"","sources":["../../../src/error-overlay/UI/LogBoxButton.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;GAMG;AACH,+CAAwC;AACxC,+CAQsB;AAEtB,2DAA6C;AAa7C,SAAgB,YAAY,CAAC,KAAY;IACvC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAE9C,IAAI,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC;IAC5C,IAAI,CAAC,eAAe,EAAE;QACpB,eAAe,GAAG;YAChB,OAAO,EAAE,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAC7C,OAAO,EAAE,WAAW,CAAC,kBAAkB,CAAC,GAAG,CAAC;SAC7C,CAAC;KACH;IAED,MAAM,OAAO,GAAG,CACd,8BAAC,mBAAI,IACH,KAAK,EAAE,yBAAU,CAAC,OAAO,CACvB;YACE,eAAe,EAAE,OAAO;gBACtB,CAAC,CAAC,eAAe,CAAC,OAAO;gBACzB,CAAC,CAAC,eAAe,CAAC,OAAO;YAC3B,GAAG,uBAAQ,CAAC,MAAM,CAAC;gBACjB,GAAG,EAAE;oBACH,MAAM,EAAE,SAAS;iBAClB;aACF,CAAC;SACH,EACD,KAAK,CAAC,KAAK,CACZ,IAEA,KAAK,CAAC,QAAQ,CACV,CACR,CAAC;IAEF,OAAO,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,CAC7B,OAAO,CACR,CAAC,CAAC,CAAC,CACF,8BAAC,uCAAwB,IACvB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,SAAS,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EACjC,UAAU,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,IAElC,OAAO,CACiB,CAC5B,CAAC;AACJ,CAAC;AA3CD,oCA2CC","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useState } from \"react\";\nimport {\n  GestureResponderEvent,\n  Insets,\n  Platform,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from \"react-native\";\n\nimport * as LogBoxStyle from \"./LogBoxStyle\";\n\ntype Props = {\n  backgroundColor: {\n    default: string;\n    pressed: string;\n  };\n  children?: any;\n  hitSlop?: Insets;\n  onPress?: ((event: GestureResponderEvent) => void) | null;\n  style?: ViewStyle;\n};\n\nexport function LogBoxButton(props: Props) {\n  const [pressed, setPressed] = useState(false);\n\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6),\n    };\n  }\n\n  const content = (\n    <View\n      style={StyleSheet.compose(\n        {\n          backgroundColor: pressed\n            ? backgroundColor.pressed\n            : backgroundColor.default,\n          ...Platform.select({\n            web: {\n              cursor: \"pointer\",\n            },\n          }),\n        },\n        props.style\n      )}\n    >\n      {props.children}\n    </View>\n  );\n\n  return props.onPress == null ? (\n    content\n  ) : (\n    <TouchableWithoutFeedback\n      hitSlop={props.hitSlop}\n      onPress={props.onPress}\n      onPressIn={() => setPressed(true)}\n      onPressOut={() => setPressed(false)}\n    >\n      {content}\n    </TouchableWithoutFeedback>\n  );\n}\n"]}