{"version":3,"file":"LogContext.js","sourceRoot":"","sources":["../../../src/error-overlay/Data/LogContext.tsx"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAI1B,wCAAwC;AAE3B,QAAA,UAAU,GAAG,eAAK,CAAC,aAAa,CAI1C;IACD,gBAAgB,EAAE,CAAC,CAAC;IACpB,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,EAAE;CACT,CAAC,CAAC;AAEH,SAAgB,OAAO;IACrB,MAAM,IAAI,GAAG,eAAK,CAAC,UAAU,CAAC,kBAAU,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAC9D;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAND,0BAMC;AAED,SAAgB,cAAc;IAC5B,MAAM,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE,CAAC;IAC7C,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAChC,CAAC;AAHD,wCAGC","sourcesContent":["import React from \"react\";\n\nimport { LogBoxLog } from \"./LogBoxLog\";\n\n// Context provider for Array<LogBoxLog>\n\nexport const LogContext = React.createContext<{\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n}>({\n  selectedLogIndex: -1,\n  isDisabled: false,\n  logs: [],\n});\n\nexport function useLogs() {\n  const logs = React.useContext(LogContext);\n  if (!logs) {\n    throw new Error(\"useLogs must be used within a LogProvider\");\n  }\n  return logs;\n}\n\nexport function useSelectedLog() {\n  const { selectedLogIndex, logs } = useLogs();\n  return logs[selectedLogIndex];\n}\n"]}