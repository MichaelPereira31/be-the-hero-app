{"version":3,"file":"css-transformer.test.web.js","sourceRoot":"","sources":["../../../../src/transformer/css/__tests__/css-transformer.test.web.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  matchCssModule,\n  getHotReplaceTemplate,\n  transform,\n  pathToHtmlSafeName,\n} from \"../css-transformer\";\n\ndescribe(transform, () => {\n  it(`should transform css in dev mode`, async () => {\n    const result = await transform({\n      filename: \"test.css\",\n      src: \"body { color: red; }\",\n      options: {\n        platform: \"web\",\n        dev: true,\n        hot: true,\n      } as any,\n    });\n\n    expect(result.src).toMatchSnapshot();\n\n    expect(result.src).toMatch(/expo-css-hmr/);\n  });\n\n  it(`should transform css in prod mode`, async () => {\n    const result = await transform({\n      filename: \"test.css\",\n      src: \"body { color: red; }\",\n      options: {\n        platform: \"web\",\n        dev: false,\n        hot: false,\n      } as any,\n    });\n\n    expect(result.src).toMatchSnapshot();\n\n    expect(result.src).not.toMatch(/expo-css-hmr/);\n  });\n\n  it(`should skip transforming css modules`, async () => {\n    const result = await transform({\n      filename: \"test.module.css\",\n      src: \"body { color: red; }\",\n      options: {\n        platform: \"web\",\n        dev: false,\n        hot: false,\n      } as any,\n    });\n\n    expect(result.src).toEqual(\"module.exports = {}\");\n  });\n\n  it(`should shim css on native`, async () => {\n    const result = await transform({\n      filename: \"test.css\",\n      src: \"body { color: red; }\",\n      options: {\n        platform: \"ios\",\n        dev: false,\n        hot: false,\n      } as any,\n    });\n\n    expect(result.src).toEqual(\"\");\n  });\n  it(`should shim css on native with comment in dev`, async () => {\n    const result = await transform({\n      filename: \"test.css\",\n      src: \"body { color: red; }\",\n      options: {\n        platform: \"ios\",\n        dev: true,\n        hot: false,\n      } as any,\n    });\n\n    expect(result.src).toMatchSnapshot();\n  });\n});\n\ndescribe(pathToHtmlSafeName, () => {\n  it(`converts filepath to safe name`, () => {\n    expect(pathToHtmlSafeName(\"foo\")).toEqual(\"foo\");\n    expect(pathToHtmlSafeName(\"../123/abc/something.module.css\")).toEqual(\n      \"___123_abc_something_module_css\"\n    );\n  });\n});\n\ndescribe(getHotReplaceTemplate, () => {\n  it(`should generate the correct template`, () => {\n    expect(getHotReplaceTemplate(\"foo\")).toMatchSnapshot();\n  });\n});\n\ndescribe(matchCssModule, () => {\n  it(`should match css modules`, () => {\n    [\n      \"test.module.css\",\n      \"test.module.ios.css\",\n      \"test.module.android.css\",\n      \"test.module.native.css\",\n      \"test.module.web.css\",\n\n      \".module.css\",\n      \"something-longer.module.css\",\n      \"../../foo-bar.module.css\",\n      \"./one/two/three/another.module.ios.css\",\n    ].forEach((file) => expect(matchCssModule(file)).toBe(true));\n  });\n  it(`should not match css modules`, () => {\n    [\n      \"foo.js\",\n      \"something\",\n      \"one/two/three\",\n      \"test.css\",\n      \"test.ios.css\",\n      \"test.android.css\",\n      \"test.native.css\",\n      \"test.web.css\",\n      \"test.scss\",\n      \"test.sass\",\n      \".css\",\n      \"../../foo-bar.css\",\n      \"./one/two/three/another.ios.css\",\n    ].forEach((file) => expect(matchCssModule(file)).toBe(false));\n  });\n});\n"]}