"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.matchCssModule = exports.getHotReplaceTemplate = exports.pathToHtmlSafeName = void 0;
function pathToHtmlSafeName(path) {
    return path.replace(/[^a-zA-Z0-9_]/g, "_");
}
exports.pathToHtmlSafeName = pathToHtmlSafeName;
function getHotReplaceTemplate(id) {
    // In dev mode, we need to replace the style tag instead of appending it
    // use the path as the expo-css-hmr attribute to find the style tag
    // to replace.
    const attr = JSON.stringify(pathToHtmlSafeName(id));
    return `
  style.setAttribute('data-expo-css-hmr', ${attr});
  const previousStyle = document.querySelector(\`[data-expo-css-hmr="\${${attr}}"]\`);
  if (previousStyle) {
      previousStyle.parentNode.removeChild(previousStyle);
  }`;
}
exports.getHotReplaceTemplate = getHotReplaceTemplate;
function matchCssModule(filename) {
    return !!filename.match(/\.module(\.(native|ios|android|web))?\.css$/);
}
exports.matchCssModule = matchCssModule;
async function transform(props) {
    if (props.filename.endsWith(".css")) {
        // Is a CSS module
        if (props.filename.match(/\.module(\.(native|ios|android|web))?\.css$/)) {
            // TODO: Support CSS modules
            if (props.options.dev) {
                props.src = `// TODO(EvanBacon): CSS modules are not supported in Metro yet.
// File: ${props.filename}
module.exports = {}`;
            }
            else {
                props.src = `module.exports = {}`;
            }
        }
        else {
            if (props.options.platform === "web") {
                const dev = props.options.dev;
                props.src = `
(() => {
  if (typeof document === 'undefined') {
    return
  }
  const head = document.head || document.getElementsByTagName('head')[0];
  const style = document.createElement('style');
  ${dev ? getHotReplaceTemplate(props.filename) : ``}
  style.setAttribute('data-expo-loader', 'css');
  head.appendChild(style);
  const css = \`${props.src}\`;
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
})();`;
            }
            else {
                // shim on native
                if (props.options.dev) {
                    props.src = `// DEBUG: Global CSS is not supported on native platforms.
// File: ${props.filename}`;
                }
                else {
                    props.src = ``;
                }
            }
        }
    }
    return props;
}
exports.transform = transform;
//# sourceMappingURL=css-transformer.js.map