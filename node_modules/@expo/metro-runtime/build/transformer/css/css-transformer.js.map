{"version":3,"file":"css-transformer.js","sourceRoot":"","sources":["../../../src/transformer/css/css-transformer.ts"],"names":[],"mappings":";;;AAEA,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;AAC7C,CAAC;AAFD,gDAEC;AAED,SAAgB,qBAAqB,CAAC,EAAU;IAC9C,wEAAwE;IACxE,mEAAmE;IACnE,cAAc;IACd,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,OAAO;4CACmC,IAAI;0EAC0B,IAAI;;;IAG1E,CAAC;AACL,CAAC;AAXD,sDAWC;AAED,SAAgB,cAAc,CAAC,QAAgB;IAC7C,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;AACzE,CAAC;AAFD,wCAEC;AAEM,KAAK,UAAU,SAAS,CAC7B,KAA2B;IAE3B,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACnC,kBAAkB;QAClB,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,6CAA6C,CAAC,EAAE;YACvE,4BAA4B;YAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;gBACrB,KAAK,CAAC,GAAG,GAAG;WACT,KAAK,CAAC,QAAQ;oBACL,CAAC;aACd;iBAAM;gBACL,KAAK,CAAC,GAAG,GAAG,qBAAqB,CAAC;aACnC;SACF;aAAM;YACL,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE;gBACpC,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;gBAC9B,KAAK,CAAC,GAAG,GAAG;;;;;;;IAOhB,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;;;kBAGlC,KAAK,CAAC,GAAG;;;;;;MAMrB,CAAC;aACA;iBAAM;gBACL,iBAAiB;gBACjB,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;oBACrB,KAAK,CAAC,GAAG,GAAG;WACX,KAAK,CAAC,QAAQ,EAAE,CAAC;iBACnB;qBAAM;oBACL,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;iBAChB;aACF;SACF;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AA9CD,8BA8CC","sourcesContent":["import type { BabelTransformerArgs } from \"metro-babel-transformer\";\n\nexport function pathToHtmlSafeName(path: string) {\n  return path.replace(/[^a-zA-Z0-9_]/g, \"_\");\n}\n\nexport function getHotReplaceTemplate(id: string) {\n  // In dev mode, we need to replace the style tag instead of appending it\n  // use the path as the expo-css-hmr attribute to find the style tag\n  // to replace.\n  const attr = JSON.stringify(pathToHtmlSafeName(id));\n  return `\n  style.setAttribute('data-expo-css-hmr', ${attr});\n  const previousStyle = document.querySelector(\\`[data-expo-css-hmr=\"\\${${attr}}\"]\\`);\n  if (previousStyle) {\n      previousStyle.parentNode.removeChild(previousStyle);\n  }`;\n}\n\nexport function matchCssModule(filename: string): boolean {\n  return !!filename.match(/\\.module(\\.(native|ios|android|web))?\\.css$/);\n}\n\nexport async function transform(\n  props: BabelTransformerArgs\n): Promise<BabelTransformerArgs> {\n  if (props.filename.endsWith(\".css\")) {\n    // Is a CSS module\n    if (props.filename.match(/\\.module(\\.(native|ios|android|web))?\\.css$/)) {\n      // TODO: Support CSS modules\n      if (props.options.dev) {\n        props.src = `// TODO(EvanBacon): CSS modules are not supported in Metro yet.\n// File: ${props.filename}\nmodule.exports = {}`;\n      } else {\n        props.src = `module.exports = {}`;\n      }\n    } else {\n      if (props.options.platform === \"web\") {\n        const dev = props.options.dev;\n        props.src = `\n(() => {\n  if (typeof document === 'undefined') {\n    return\n  }\n  const head = document.head || document.getElementsByTagName('head')[0];\n  const style = document.createElement('style');\n  ${dev ? getHotReplaceTemplate(props.filename) : ``}\n  style.setAttribute('data-expo-loader', 'css');\n  head.appendChild(style);\n  const css = \\`${props.src}\\`;\n  if (style.styleSheet){\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n})();`;\n      } else {\n        // shim on native\n        if (props.options.dev) {\n          props.src = `// DEBUG: Global CSS is not supported on native platforms.\n// File: ${props.filename}`;\n        } else {\n          props.src = ``;\n        }\n      }\n    }\n  }\n  return props;\n}\n"]}