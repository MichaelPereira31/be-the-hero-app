{"version":3,"file":"loadBundlePolyfill.js","sourceRoot":"","sources":["../../src/async-require/loadBundlePolyfill.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;GAKG;AACH,+CAAwC;AAExC,2DAAwD;AACxD,mDAAqD;AACrD,6DAAqC;AACrC,iEAAyC;AAEzC,IAAI,eAAe,GAAG,CAAC,CAAC;AAExB;;;;GAIG;AACH,SAAgB,eAAe,CAAC,UAAkB;IAChD,MAAM,UAAU,GAAG,IAAA,qCAAiB,EAAC,UAAU,EAAE;QAC/C,WAAW,EAAE,MAAM;QACnB,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,uBAAQ,CAAC,EAAE;QACrB,mDAAmD;QACnD,sBAAsB,EAAE,IAAI;KAC7B,CAAC,CAAC;IAEH,qEAAqE;IACrE,qBAAW,CAAC,WAAW,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAClD,eAAe,EAAE,CAAC;IAElB,OAAO,IAAA,kCAAkB,EAAC,UAAU,CAAC;SAClC,IAAI,CAAC,GAAG,EAAE;QACT,mBAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC,CAAC;SACD,OAAO,CAAC,GAAG,EAAE;QACZ,IAAI,CAAC,EAAE,eAAe,EAAE;YACtB,qBAAW,CAAC,IAAI,EAAE,CAAC;SACpB;IACH,CAAC,CAAC,CAAC;AACP,CAAC;AAtBD,0CAsBC","sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Platform } from \"react-native\";\n\nimport { buildUrlForBundle } from \"./buildUrlForBundle\";\nimport { fetchThenEvalAsync } from \"./fetchThenEval\";\nimport HMRClient from \"../HMRClient\";\nimport LoadingView from \"../LoadingView\";\n\nlet pendingRequests = 0;\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n */\nexport function loadBundleAsync(bundlePath: string): Promise<void> {\n  const requestUrl = buildUrlForBundle(bundlePath, {\n    modulesOnly: \"true\",\n    runModule: \"false\",\n    platform: Platform.OS,\n    // The JavaScript loader does not support bytecode.\n    runtimeBytecodeVersion: null,\n  });\n\n  // Send a signal to the `expo` package to show the loading indicator.\n  LoadingView.showMessage(\"Downloading...\", \"load\");\n  pendingRequests++;\n\n  return fetchThenEvalAsync(requestUrl)\n    .then(() => {\n      HMRClient.registerBundle(requestUrl);\n    })\n    .finally(() => {\n      if (!--pendingRequests) {\n        LoadingView.hide();\n      }\n    });\n}\n"]}