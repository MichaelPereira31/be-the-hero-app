"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadBundleAsync = void 0;
/**
 * Copyright Â© 2022 650 Industries.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const react_native_1 = require("react-native");
const buildUrlForBundle_1 = require("./buildUrlForBundle");
const fetchThenEval_1 = require("./fetchThenEval");
const HMRClient_1 = __importDefault(require("../HMRClient"));
const LoadingView_1 = __importDefault(require("../LoadingView"));
let pendingRequests = 0;
/**
 * Load a bundle for a URL using fetch + eval on native and script tag injection on web.
 *
 * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.
 */
function loadBundleAsync(bundlePath) {
    const requestUrl = (0, buildUrlForBundle_1.buildUrlForBundle)(bundlePath, {
        modulesOnly: "true",
        runModule: "false",
        platform: react_native_1.Platform.OS,
        // The JavaScript loader does not support bytecode.
        runtimeBytecodeVersion: null,
    });
    // Send a signal to the `expo` package to show the loading indicator.
    LoadingView_1.default.showMessage("Downloading...", "load");
    pendingRequests++;
    return (0, fetchThenEval_1.fetchThenEvalAsync)(requestUrl)
        .then(() => {
        HMRClient_1.default.registerBundle(requestUrl);
    })
        .finally(() => {
        if (!--pendingRequests) {
            LoadingView_1.default.hide();
        }
    });
}
exports.loadBundleAsync = loadBundleAsync;
//# sourceMappingURL=loadBundlePolyfill.js.map