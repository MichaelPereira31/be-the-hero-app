"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HMRClient_1 = __importDefault(require("../../HMRClient"));
const LoadingView_1 = __importDefault(require("../../LoadingView"));
const fetchThenEval_1 = require("../fetchThenEval");
const loadBundlePolyfill_1 = require("../loadBundlePolyfill");
jest.mock("../../getDevServer", () => jest.fn(() => ({
    bundleLoadedFromServer: true,
    fullBundleUrl: "http://localhost:19000?platform=android&modulesOnly=true&runModule=false&runtimeBytecodeVersion=null",
    url: "http://localhost:19000/",
})));
jest.mock("../fetchThenEval", () => ({
    fetchThenEvalAsync: jest.fn(async () => { }),
}));
jest.mock("../../HMRClient", () => ({ registerBundle: jest.fn() }));
jest.mock("../../LoadingView", () => ({
    showMessage: jest.fn(),
    hide: jest.fn(),
}));
it("loads a bundle", async () => {
    await (0, loadBundlePolyfill_1.loadBundleAsync)("Second");
    expect(LoadingView_1.default.showMessage).toBeCalledWith("Downloading...", "load");
    expect(LoadingView_1.default.hide).toBeCalledWith();
    const url = `/Second.bundle?modulesOnly=true&runModule=false&platform=web&runtimeBytecodeVersion=`;
    expect(HMRClient_1.default.registerBundle).toBeCalledWith(url);
    expect(fetchThenEval_1.fetchThenEvalAsync).toBeCalledWith(url);
});
//# sourceMappingURL=loadBundlePolyfill.test.web.js.map