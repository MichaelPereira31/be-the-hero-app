{"version":3,"file":"buildUrlForBundle.test.native.js","sourceRoot":"","sources":["../../../src/async-require/__tests__/buildUrlForBundle.test.native.ts"],"names":[],"mappings":";;;;;;AAAA,sEAA8C;AAC9C,4DAAyD;AAElD,MAAM,MAAM,GAAG,CACpB,EAAK,EACmB,EAAE,CAAC,EAA4B,CAAC;AAF7C,QAAA,MAAM,UAEuC;AAE1D,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;IACnC,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC;AACnB,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACjC,IAAA,cAAM,EAAC,sBAAY,CAAC,CAAC,mBAAmB,CAAC;QACvC,sBAAsB,EAAE,IAAI;QAC5B,aAAa,EACX,sGAAsG;QACxG,GAAG,EAAE,wBAAwB;KAC9B,CAAC,CAAC;IAEH,MAAM,CAAC,IAAA,qCAAiB,EAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAC9C,oHAAoH,CACrH,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;IACvD,IAAA,cAAM,EAAC,sBAAY,CAAC,CAAC,mBAAmB,CAAC;QACvC,sBAAsB,EAAE,IAAI;QAC5B,aAAa,EAAE,yCAAyC;QACxD,GAAG,EAAE,wBAAwB;KAC9B,CAAC,CAAC;IAEH,MAAM,CAAC,IAAA,qCAAiB,EAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,OAAO,CACpE,yEAAyE,CAC1E,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;IACxD,IAAA,cAAM,EAAC,sBAAY,CAAC,CAAC,mBAAmB,CAAC;QACvC,sBAAsB,EAAE,KAAK;QAC7B,aAAa,EAAE,SAAS;QACxB,GAAG,EAAE,SAAS;KACf,CAAC,CAAC;IAEH,MAAM,CAAC,GAAG,EAAE,CACV,IAAA,qCAAiB,EAAC,QAAQ,EAAE,EAAE,CAAC,CAChC,CAAC,kCAAkC,CAClC,+JAA+J,CAChK,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import getDevServer from \"../../getDevServer\";\nimport { buildUrlForBundle } from \"../buildUrlForBundle\";\n\nexport const asMock = <T extends (...args: any[]) => any>(\n  fn: T\n): jest.MockedFunction<T> => fn as jest.MockedFunction<T>;\n\njest.mock(\"../../getDevServer\", () => {\n  return jest.fn();\n});\n\nit(`returns an expected URL`, () => {\n  asMock(getDevServer).mockReturnValueOnce({\n    bundleLoadedFromServer: true,\n    fullBundleUrl:\n      \"http://localhost:19000?platform=android&modulesOnly=true&runModule=false&runtimeBytecodeVersion=null\",\n    url: \"http://localhost:19000\",\n  });\n\n  expect(buildUrlForBundle(\"/foobar\", {})).toEqual(\n    \"http://localhost:19000/foobar.bundle?platform=android&modulesOnly=true&runModule=false&runtimeBytecodeVersion=null\"\n  );\n});\n\nit(`returns an expected URL with extra parameters`, () => {\n  asMock(getDevServer).mockReturnValueOnce({\n    bundleLoadedFromServer: true,\n    fullBundleUrl: \"http://localhost:19000?platform=android\",\n    url: \"http://localhost:19000\",\n  });\n\n  expect(buildUrlForBundle(\"/more/than/one\", { happy: \"meal\" })).toEqual(\n    \"http://localhost:19000/more/than/one.bundle?platform=android&happy=meal\"\n  );\n});\n\nit(\"throws on native when the bundle is not hosted\", () => {\n  asMock(getDevServer).mockReturnValueOnce({\n    bundleLoadedFromServer: false,\n    fullBundleUrl: \"file://\",\n    url: \"file://\",\n  });\n\n  expect(() =>\n    buildUrlForBundle(\"foobar\", {})\n  ).toThrowErrorMatchingInlineSnapshot(\n    `\"This bundle was compiled with 'transformer.experimentalImportBundleSupport' in the 'metro.config.js' and can only be used when connected to a Metro server.\"`\n  );\n});\n"]}